{"version":3,"file":"static/js/186.07602343.chunk.js","mappings":"yNAwCA,UApCgB,WACd,OAAwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE8BC,EAAAA,EAAAA,IAAgBH,GAF9C,OAEUI,EAFV,OAGIL,EAAgBK,GAHpB,gDAKIC,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACP,IACJK,QAAQC,IAAIR,IAEV,8BACGA,EAAaU,OAAS,GACrB,wBACGV,EAAaW,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/B,OACE,2BACE,oCAAYD,MACZ,uBAAIC,MAFGF,EAKZ,OAGH,sEAIP,C,8OCpCKG,EAAM,mCACCC,EAAU,sCACVC,EACX,6GAEIC,EAAMC,EAAAA,GAAAA,OAAa,CACvBC,QAAS,gCAIEC,EAAY,mCAAG,+GAEDH,EAAII,IAAJ,uCAAwCP,IAFvC,cAElBQ,EAFkB,gBAGHA,EAASC,KAHN,cAGlBC,EAHkB,yBAIjBA,GAJiB,wCAMxBlB,QAAQmB,MAAR,MANwB,+DAAH,qDAWZC,EAAY,mCAAG,WAAMC,GAAN,kGAEDV,EAAII,IAAJ,iCACKP,EADL,kBACkBa,EADlB,yBAFC,cAElBL,EAFkB,gBAKHA,EAASC,KALN,cAKlBC,EALkB,yBAMjBA,EAAOI,SANU,wCAQxBtB,QAAQmB,MAAR,MARwB,+DAAH,sDAaZI,EAAe,mCAAG,WAAMlB,GAAN,kGAEJM,EAAII,IAAJ,kBAAmBV,EAAnB,oBAAiCG,IAF7B,cAErBQ,EAFqB,gBAGNA,EAASC,KAHH,cAGrBC,EAHqB,yBAIpBA,GAJoB,wCAM3BlB,QAAQmB,MAAR,MAN2B,+DAAH,sDAWfK,EAAc,mCAAG,WAAMnB,GAAN,kGAEHM,EAAII,IAAJ,kBAAmBV,EAAnB,4BAAyCG,IAFtC,cAEpBQ,EAFoB,gBAGLA,EAASC,KAHJ,cAGpBC,EAHoB,yBAInBA,EAAOO,MAJY,wCAM1BzB,QAAQmB,MAAR,MAN0B,+DAAH,sDAWdrB,EAAe,mCAAG,WAAMO,GAAN,kGAEJM,EAAII,IAAJ,kBAAmBV,EAAnB,4BAAyCG,IAFrC,cAErBQ,EAFqB,gBAGNA,EAASC,KAHH,cAGrBC,EAHqB,yBAIpBA,EAAOI,SAJa,wCAM3BtB,QAAQmB,MAAR,MAN2B,+DAAH,qD","sources":["components/Reviews/Reviews.jsx","moviesAPI.js"],"sourcesContent":["import { getMovieReviews } from 'moviesAPI';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovieInfo() {\n      try {\n        const movieReview = await getMovieReviews(movieId);\n        setMovieReviews(movieReview);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getMovieInfo();\n  }, [movieId]);\n  console.log(movieReviews);\n  return (\n    <>\n      {movieReviews.length > 0 ? (\n        <ul>\n          {movieReviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <p>Author: {author}</p>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don`t have any reviews for this movie </p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst KEY = '0166c28893f9efa335e2a16915462c94';\nexport const IMG_ORG = 'https://image.tmdb.org/t/p/original';\nexport const IMG_CONTENT =\n  'https://www.windhorsepublications.com/wp-content/uploads/2019/11/image-coming-soon-placeholder-300x300.png';\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/',\n});\n\n// export const getPopMovies = async (page = 1, language = 'en')\nexport const getPopMovies = async () => {\n  try {\n    const response = await api.get(`3/trending/movie/day?api_key=${KEY}`);\n    const newObj = await response.data;\n    return newObj;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const searchMovies = async name => {\n  try {\n    const response = await api.get(\n      `3/search/movie?api_key=${KEY}&query=${name}&include_adult=false`\n    );\n    const newObj = await response.data;\n    return newObj.results;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const response = await api.get(`3/movie/${id}?api_key=${KEY}`);\n    const newObj = await response.data;\n    return newObj;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMovieActors = async id => {\n  try {\n    const response = await api.get(`3/movie/${id}/credits?api_key=${KEY}`);\n    const newObj = await response.data;\n    return newObj.cast;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await api.get(`3/movie/${id}/reviews?api_key=${KEY}`);\n    const newObj = await response.data;\n    return newObj.results;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n"],"names":["useState","movieReviews","setMovieReviews","movieId","useParams","useEffect","getMovieReviews","movieReview","console","log","getMovieInfo","length","map","id","author","content","KEY","IMG_ORG","IMG_CONTENT","api","axios","baseURL","getPopMovies","get","response","data","newObj","error","searchMovies","name","results","getMovieDetails","getMovieActors","cast"],"sourceRoot":""}